@model TMSBilling.Controllers.ProductViewModel

@{
    var order = ViewBag.Order;
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewData["Title"] = "Order Load DO : "+order.inv_no + ", " + order.cnee_code;
}

<style>
    .table-container {
        overflow-x: auto;
    }

    .col-narrow {
        width: 100px;
    }

    .col-action {
        width: 120px;
    }

    .product-search {
        max-height: 400px;
        overflow-y: auto;
    }

    .product-item {
        cursor: pointer;
        padding: 10px;
        border: 1px solid #dee2e6;
        margin-bottom: 5px;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

        .product-item:hover {
            background-color: #f8f9fa;
        }

        .product-item.selected {
            background-color: #e3f2fd;
            border-color: #2196f3;
        }
</style>

<div style="font-size:12px;">
    @* <h2>Product Management</h2> *@

    <!-- Add Item Button -->
    <div class="mb-3">
        <button type="button" class="btn btn-sm btn-warning" onclick="window.location.href='/Order/Form/@order.id_seq'">
            <i class="bi bi-arrow-left"></i> Back
        </button>
        <button type="button" class="btn btn-sm btn-primary" onclick="openProductModal()">
            <i class="fas fa-plus"></i> Add Item
        </button>
    </div>

    <!-- Main Table -->
    <div class="detail-section">
        <div class="table-container">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th class="col-narrow">#</th>
                        <th class="col-narrow">Item Name</th>
                        <th class="col-narrow">Item Category</th>
                        <th class="col-narrow">Package Unit</th>
                        <th class="col-narrow">Length</th>
                        <th class="col-narrow">Width</th>
                        <th class="col-narrow">Height</th>
                        <th class="col-narrow">Weight</th>
                        <th class="col-narrow">Qty</th>
                        <th class="col-action">Action</th>
                    </tr>
                </thead>
                <tbody id="detailTableBody">
                    <!-- Data akan dimuat via JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Product Search Modal -->
    <div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalLabel">Select Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Search Input -->
                    <div class="mb-3">
                        <input type="text" class="form-control" id="productSearch" placeholder="Search products..." onkeyup="searchProducts()">
                    </div>

                    <!-- Product List -->
                    <div class="product-search" id="productList">
                        <!-- Product items akan dimuat via JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Details Modal -->
    <div class="modal fade" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productDetailsModalLabel">Product Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="productDetailsForm" asp-action="SaveProduct" asp-controller="Order" method="post">
                <div class="modal-body">
                   
                        <input type="hidden" name="id_seq" id="id_seq">
                        <input type="hidden" name="order_h_id" value="@order.id_seq">
                        <input type="hidden" name="product_id" id="selectedProductId">
                        <input type="hidden" name="order_id" value="@ViewBag.OrderIDMcEasy">
                        <input type="hidden" id="editItemIndex" value="-1">

                        <div class="mb-3">
                            <label class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="productName" name="name" readonly>
                        </div>

                       

                        <div class="row">
                            <div class="mb-3 col-md-6">
                                <label class="form-label">Category</label>
                                <input type="text" class="form-control" id="productCategory" name="category" readonly>
                            </div>  
                            <div class="mb-3 col-md-6">
                                <label class="form-label">UoM *</label>
                                <input type="text" class="form-control" id="packageUnit" name="uom" readonly>
                            </div>
                        </div>

                        

                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Length (cm) *</label>
                                    <input type="number" class="form-control" id="length" name="length" step="0.01" required autocomplete="off"/>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Width (cm) *</label>
                                    <input type="number" class="form-control" id="width" name="width" step="0.01" required autocomplete="off">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Height (cm) *</label>
                                    <input type="number" class="form-control" id="height" name="height" step="0.01" required autocomplete="off"/>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Weight (kg) *</label>
                                    <input type="number" class="form-control" name="weight" id="weight" step="0.01" required autocomplete="off"/>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Quantity *</label>
                                    <input type="number" class="form-control" id="quantity" name="quantity" min="1" required autocomplete="off"/>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Note</label>
                            <input type="text" class="form-control" name="note" autocomplete="off" />
                        </div>
                    
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
                </form>
            </div>
        </div>
    </div>
</div>


@section Scripts {
<script>

    const masterProducts = @Html.Raw(Json.Serialize(ViewBag.MasterProducts))
    console.log(masterProducts)
    // Data items yang sudah ditambahkan
    // let tableItems = [];

    // console.log("@ViewBag.OrderLoad")

    let orderLoad = @Html.Raw(Json.Serialize(ViewBag.OrderLoad))
            console.log(orderLoad);
    let tableItems = [];
            if (orderLoad && orderLoad.length > 0) {
            orderLoad.forEach(item => {
                // contoh ambil data dari setiap row
                tableItems.push({
                    id: item.id_seq,
                    productId: item.product_id,
                    name: item.item_name,
                    category : item.item_category,
                    quantity: item.item_qty,
                    packageUnit: item.pkg_unit,
                    weight: item.item_wgt,
                    length: item.item_length,
                    width: item.item_width,
                    height: item.item_height,
                    quantity :item.item_qty,
                });
            });
        }

        console.log(tableItems);

    // Function untuk membuka modal pencarian product
    function openProductModal() {
        document.getElementById('editItemIndex').value = '-1'; // Reset edit index
        loadProducts();
        const productModal = new bootstrap.Modal(document.getElementById('productModal'));
        productModal.show();
    }

    // Function untuk load semua products ke modal
    function loadProducts() {
        const productList = document.getElementById('productList');
        productList.innerHTML = '';

        masterProducts.forEach(product => {
            const productItem = createProductItem(product);
            productList.appendChild(productItem);
        });
    }

    // Function untuk membuat elemen product item
    function createProductItem(product) {
        const div = document.createElement('div');
        div.className = 'product-item';
        div.onclick = () => selectProduct(product);

        div.innerHTML = `
            <div class="d-flex justify-content-between">
                <div>
                    <h6 class="mb-1">${product.name}</h6>
                    <small class="text-muted">SKU: ${product.sku}</small><br>
                    <small class="text-muted">Category: ${product.product_type.product_category.name}</small>
                </div>
                <div class="text-end">
                    <small class="text-muted">UOM: ${product.uom}</small><br>
                    <small class="text-success">Rp ${product.price.toLocaleString('id-ID')}</small>
                </div>
            </div>
        `;

        return div;
    }

    // Function untuk search products
    function searchProducts() {
        const searchTerm = document.getElementById('productSearch').value.toLowerCase();
        const productList = document.getElementById('productList');
        productList.innerHTML = '';

        const filteredProducts = masterProducts.filter(product =>
            product.name.toLowerCase().includes(searchTerm) ||
            product.sku.toLowerCase().includes(searchTerm) ||
            product.product_type.product_category.name.toLowerCase().includes(searchTerm)
        );

        filteredProducts.forEach(product => {
            const productItem = createProductItem(product);
            productList.appendChild(productItem);
        });
    }

    // Function untuk select product
    function selectProduct(product) {
        // Close product modal
        const productModal = bootstrap.Modal.getInstance(document.getElementById('productModal'));
        productModal.hide();

        // Fill product details modal
        document.getElementById('id_seq').value = 0;
        document.getElementById('selectedProductId').value = product.id;
        document.getElementById('productName').value = product.name;
        document.getElementById('productCategory').value = product.product_type.product_category.name;
        document.getElementById('weight').value = product.weight;
        document.getElementById('packageUnit').value = product.uom;

        // Reset form fields
        // document.getElementById('packageUnit').value = '';
        document.getElementById('length').value = '';
        document.getElementById('width').value = '';
        document.getElementById('height').value = '';
        document.getElementById('quantity').value = '1';

        // Show product details modal
        const detailsModal = new bootstrap.Modal(document.getElementById('productDetailsModal'));
        detailsModal.show();
    }

    // Function untuk save item
    function saveItem() {
        const form = document.getElementById('productDetailsForm');
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        const editIndex = parseInt(document.getElementById('editItemIndex').value);
        const productId = document.getElementById('selectedProductId').value;
        const selectedProduct = masterProducts.find(p => p.id === productId);

        const itemData = {
            id: editIndex === -1 ? Date.now().toString() : tableItems[editIndex].id,
            productId: productId,
            name: document.getElementById('productName').value,
            category: document.getElementById('productCategory').value,
            packageUnit: document.getElementById('packageUnit').value,
            length: parseFloat(document.getElementById('length').value),
            width: parseFloat(document.getElementById('width').value),
            height: parseFloat(document.getElementById('height').value),
            weight: parseFloat(document.getElementById('weight').value),
            quantity: parseInt(document.getElementById('quantity').value),
            product: selectedProduct
        };

        if (editIndex === -1) {
            // Add new item
            tableItems.push(itemData);
        } else {
            // Update existing item
            tableItems[editIndex] = itemData;
        }

        // Close modal
        const detailsModal = bootstrap.Modal.getInstance(document.getElementById('productDetailsModal'));
        detailsModal.hide();

        // Refresh table
        refreshTable();
    }

    $('#productDetailsForm').on('submit', function (e) {
        e.preventDefault();
        let formData = {};
        $(this).serializeArray().forEach(item => {
            formData[item.name] = item.value;
        });
        console.log("Payload yang dikirim:", formData);

        // return;

        if (!formData.id_seq || formData.id_seq == '0' ) {
            formData.id_seq = 0;
                showLoading()
            $.ajax({
                url: '/Order/SaveProduct',
                type: 'POST',
                contentType: 'application/json',   // kirim sebagai JSON
                data: JSON.stringify(formData),   // ubah objek ke JSON
                success: function (response) {
                    hideLoading()
                         console.log('Sukses:', response);
                    Swal.fire({
                        position: "top-end",
                        icon: "success",
                        title: response.message,
                        showConfirmButton: false,
                        timer: 1000
                    }).then(() => {
                        // saveItem()
                        window.location.reload();
                    });
                },
                error: function (xhr) {
                    console.error('Error:', xhr.responseText);
                }
            });
        }else{
            $.ajax({
                url: '/Order/EditProduct',
                type: 'PATCH',
                contentType: 'application/json',   // kirim sebagai JSON
                data: JSON.stringify(formData),   // ubah objek ke JSON
                success: function (response) {
                    Swal.fire({
                        position: "top-end",
                        icon: "success",
                        title: response.message,
                        showConfirmButton: false,
                        timer: 1000
                    }).then(() => {
                        // saveItem()
                         window.location.reload();
                    });
                },
                error: function (xhr) {
                    console.error('Error:', xhr.responseText);
                }
            });
        }


    });

    // Function untuk refresh table
    function refreshTable() {
        const tbody = document.getElementById('detailTableBody');
        tbody.innerHTML = '';

        tableItems.forEach((item, index) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${index + 1}</td>
                <td>${item.name}</td>
                <td>${item.category}</td>
                <td>${item.packageUnit}</td>
                <td>${item.length}</td>
                <td>${item.width}</td>
                <td>${item.height}</td>
                <td>${item.weight}</td>
                <td>${item.quantity}</td>
                <td>
                    <button class="btn btn-sm btn-warning me-1" onclick="editItem(${index})">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="deleteItem(${item.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    // Function untuk edit item
    function editItem(index) {
        const item = tableItems[index];

        // Set edit index
        document.getElementById('editItemIndex').value = index;

        // Fill form with existing data
        document.getElementById('id_seq').value = item.id;
        document.getElementById('selectedProductId').value = item.productId;
        document.getElementById('productName').value = item.name;
        document.getElementById('productCategory').value = item.category;
        document.getElementById('packageUnit').value = item.packageUnit;
        document.getElementById('length').value = item.length;
        document.getElementById('width').value = item.width;
        document.getElementById('height').value = item.height;
        document.getElementById('weight').value = item.weight;
        document.getElementById('quantity').value = item.quantity;

        // Show modal
        const detailsModal = new bootstrap.Modal(document.getElementById('productDetailsModal'));
        detailsModal.show();
    }

    // Function untuk delete item
    function deleteItem(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: "This item will be deleted permanently!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                showLoading()
                $.ajax({
                    url: '/Order/DeleteLoad/' + id,
                    type: 'GET',
                    contentType: 'application/json',
                    success: function (response) {
                        console.log('Sukses:', response);
                        hideLoading()
                        Swal.fire({
                            position: "top-end",
                            icon: "success",
                            title: response.message,
                            showConfirmButton: false,
                            timer: 1000
                        }).then(() => {
                            window.location.reload();
                        });
                    },
                    error: function (xhr) {
                        console.error('Error:', xhr.responseText);
                        Swal.fire({
                            icon: "error",
                            title: "Failed",
                            text: "Something went wrong!"
                        });
                    }
                });
            }
        });
    }


    // Initialize table on page load
    document.addEventListener('DOMContentLoaded', function() {
        refreshTable();
    });
</script>
}