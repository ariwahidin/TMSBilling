@model TMSBilling.Models.ViewModels.OrderViewModel
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewData["Title"] = "Order Form";
}

<style>
    .form-container {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        padding: 30px;
        margin: 0 auto;
        max-width: 100%;
    }

    .form-header {
        border-bottom: 2px solid #e9ecef;
        padding-bottom: 20px;
        margin-bottom: 30px;
    }

    .form-title {
        color: #2c3e50;
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 0;
    }

    .header-section {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 20px;
        margin-bottom: 30px;
    }

    .header-title {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
    }

        .header-title i {
            margin-right: 8px;
            color: #6c757d;
        }

    .select2-container--default .select2-selection--single {
        height: 25px;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 25px;
            padding-left: 12px;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 25px;
        }

    .detail-section {
        margin-top: 30px;
    }

    .detail-title {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
    }

        .detail-title i {
            margin-right: 8px;
            color: #6c757d;
        }

    .excel-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 12px;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        overflow: hidden;
    }

        .excel-table th {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 8px 6px;
            text-align: center;
            font-weight: 600;
            color: #495057;
            font-size: 11px;
            white-space: nowrap;
        }

        .excel-table td {
            border: 1px solid #dee2e6;
            padding: 2px;
            vertical-align: middle;
        }

        .excel-table input,
        .excel-table select {
            width: 100%;
            border: none;
            padding: 6px 8px;
            font-size: 12px;
            background: transparent;
            outline: none;
            min-height: 30px;
        }

            .excel-table input:focus,
            .excel-table select:focus {
                background: #e3f2fd;
            }

        .excel-table .number-input {
            text-align: right;
        }

    .action-btn {
        background: #dc3545;
        color: white;
        border: none;
        padding: 6px 10px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        transition: background 0.3s;
    }

        .action-btn:hover {
            background: #c82333;
        }

    .btn-add-row {
        background: #28a745;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 10px;
        transition: background 0.3s;
    }

        .btn-add-row:hover {
            background: #218838;
        }

    .form-actions {
        display: flex;
        gap: 15px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e9ecef;
        justify-content: flex-end;
    }

    .btn-save {
        background: #007bff;
        color: white;
        border: none;
        padding: 12px 30px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: background 0.3s;
    }

        .btn-save:hover {
            background: #0056b3;
        }

    .btn-cancel {
        background: #6c757d;
        color: white;
        border: none;
        padding: 12px 30px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: background 0.3s;
    }

        .btn-cancel:hover {
            background: #545b62;
        }

    .col-narrow {
        width: 80px;
    }

    .col-action {
        width: 60px;
    }

    .table-container {
        overflow-x: auto;
        border: 1px solid #dee2e6;
        border-radius: 6px;
    }

    .row-number {
        background: #f8f9fa;
        text-align: center;
        font-weight: 600;
        color: #6c757d;
        width: 40px;
    }

    .header-section * {
        font-size: 12px;
    }



    .input-group-append-custom {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
    }

    .form-control-with-button {
        padding-right: 45px !important;
    }

    .address-search {
        max-height: 400px;
        overflow-y: auto;
    }

    .address-item {
        cursor: pointer;
        padding: 12px;
        border: 1px solid #dee2e6;
        margin-bottom: 8px;
        border-radius: 6px;
        transition: all 0.3s;
    }

        .address-item:hover {
            background-color: #f8f9fa;
            border-color: #007bff;
        }

        .address-item.disabled {
            opacity: 0.6;
            cursor: not-allowed !important;
            background-color: #f8f9fa;
        }

            .address-item.disabled:hover {
                background-color: #f8f9fa !important;
                border-color: #dee2e6 !important;
            }

    .loading-spinner {
        display: none;
        text-align: center;
        padding: 20px;
    }

    .position-relative-custom {
        position: relative;
    }
</style>
<a href="/Order/Index" class="btn btn-sm btn-primary mb-2"> <i class="bi bi-arrow-left"></i> Back</a>
<a href="/Order/Form" class="btn btn-sm btn-warning mb-2"> <i class="bi bi-arrow-clockwise"></i> Reset</a>
@if (Model.Header.id_seq > 0)
{
    <a href="/Order/FormLoad/@Model.Header.id_seq" class="btn btn-info btn-sm mb-2">
        <i class="bi bi-box-seam-fill"></i> Order Load
    </a>
}
<div class="form-container">
    
    <form id="orderForm">

        <div class="header-section">
            <div class="row">
                <div class="col-md-5">
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end"> Expected pickup on : </label>
                        <div class="col-sm-8">
                            <input type="datetime-local" id="pickup_date" name="pickup_date" class="form-control" value="@(Model.Header.pickup_date?.ToString("yyyy-MM-ddTHH:mm"))" />
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Expected delivered on : </label>
                        <div class="col-sm-8">
                            <input type="datetime-local" id="delivery_date" name="delivery_date" class="form-control" value="@(Model.Header.delivery_date?.ToString("yyyy-MM-ddTHH:mm"))" />
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">WHS Code : </label>
                        <div class="col-sm-8">
                            <input type="hidden" id="id_seq" name="id_seq" value="@Model.Header.id_seq" />
                            <select id="wh_code" asp-for="Header.wh_code" asp-items="ViewBag.ListWarehouse" class="form-select select2" required>
                                <option value="">Select an Option</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Customer: </label>
                        <div class="col-sm-8">
                            <select id="sub_custid" asp-for="Header.sub_custid" asp-items="ViewBag.ListCustomer" class="form-select select2" required>
                                <option value="">Select an Option</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Consignee ID : </label>
                        <div class="col-sm-8">
                            <select id="cnee_code" asp-for="Header.cnee_code" asp-items="ViewBag.ListConsignee" class="form-select select2" required>
                                <option value="">Select an Option</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Invoice No : </label>
                        <div class="col-sm-8">
                            <input type="text" id="inv_no" name="inv_no" class="form-control" value="@Model.Header.inv_no" />
                        </div>
                    </div>
                    
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Origin : </label>
                        <div class="col-sm-8">
                            <div class="position-relative-custom">
                                <input type="text"
                                       id="origin_id"
                                       name="origin_id"
                                       value="@Model.Header.mceasy_origin_name"
                                       class="form-control form-control-with-button"
                                       placeholder="Select origin address..."
                                       readonly />
                                <input type="hidden" id="origin_address_id" name="origin_address_id" value="@Model.Header.mceasy_origin_address_id" />
                                <div class="input-group-append-custom">
                                    <button type="button"
                                            class="btn btn-outline-secondary btn-sm"
                                            onclick="openAddressModal('origin')"
                                            title="Pilih Alamat">
                                        <i class="fas fa-bars"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="row mb-3">
                        <label class="col-sm-4 col-form-label text-end">Origin Area :</label>
                        <div class="col-sm-8">
                            <input type="text"
                                   id="city"
                                   name="city"
                                   class="form-control"
                                   placeholder=""
                                   value="@Model.Header.origin_id"
                                   readonly />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <label class="col-sm-4 col-form-label text-end">Destination :</label>
                        <div class="col-sm-8">
                            <div class="position-relative-custom">
                                <input type="hidden" id="destination_address_id" name="destination_address_id" value="@Model.Header.mceasy_destination_address_id" />
                                <input type="text"
                                       id="destination_id"
                                       name="destination_id"
                                       class="form-control form-control-with-button"
                                       placeholder="Select destination address..."
                                       value="@Model.Header.mceasy_dest_name"
                                       readonly />
                                <div class="input-group-append-custom">
                                    <button type="button"
                                            class="btn btn-outline-secondary btn-sm"
                                            onclick="openAddressModal('destination')"
                                            title="Pilih Alamat">
                                        <i class="fas fa-bars"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <label class="col-sm-4 col-form-label text-end">Destination Area :</label>
                        <div class="col-sm-8">
                            <input type="text"
                                   id="destination_city"
                                   name="destination_city"
                                   value="@Model.Header.dest_area"
                                   class="form-control"
                                   placeholder=""
                                   readonly />
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Tot Pkgs : </label>
                        <div class="col-sm-8">
                            <input type="text" id="tot_pkgs" name="tot_pkgs" class="form-control" value="@Model.Header.tot_pkgs" />
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">UoM : </label>
                        <div class="col-sm-8">
                            @* <input type="text" id="uom" name="uom" class="form-control" value="@Model.Header.uom" /> *@
                            <select id="uom" asp-for="Header.uom" asp-items="ViewBag.ListUoM" class="form-select select2" required>
                                <option value="">Select an Option</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Pallet Consume : </label>
                        <div class="col-sm-8">
                            <input type="text" id="pallet_consume" name="pallet_consume" class="form-control" value="@Model.Header.pallet_consume" />
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Pallet Delivery : </label>
                        <div class="col-sm-8">
                            <input type="text" id="pallet_delivery" name="pallet_delivery" class="form-control" value="@Model.Header.pallet_delivery" />
                        </div>
                    </div>
                </div>


                <div class="col-md-5">
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">SI No : </label>
                        <div class="col-sm-8">
                            <input type="text" id="si_no" name="si_no" class="form-control" value="@Model.Header.si_no" />
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">DO Rcv Date : </label>
                        <div class="col-sm-8">
                            <input type="date" id="do_rcv_date" name="do_rcv_date" class="form-control" value="@(Model.Header.do_rcv_date?.ToString("yyyy-MM-dd"))" />
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">DO Rcv Time : </label>
                        <div class="col-sm-8">
                            <input type="time" id="do_rcv_time" name="do_rcv_time" class="form-control" value="@Model.Header.do_rcv_time" />
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Moda Req : </label>
                        <div class="col-sm-8">
                            @* <input type="text" id="moda_req" name="moda_req" class="form-control" value="@Model.Header.moda_req" /> *@
                            <select id="moda_req" asp-for="Header.moda_req" asp-items="ViewBag.ListModa" class="form-select select2" required>
                                <option value="">Select an Option</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Serv Req : </label>
                        <div class="col-sm-8">
                            <select id="serv_req" asp-for="Header.serv_req" asp-items="ViewBag.ListServiceType" class="form-select select2" required>
                                <option value="">Select an Option</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Truck Size : </label>
                        <div class="col-sm-8">
                            @* <input type="text" id="truck_size" name="truck_size" class="form-control" value="@Model.Header.truck_size" /> *@
                            <select id="truck_size" asp-for="Header.truck_size" asp-items="ViewBag.ListTruckSize" class="form-select select2" required>
                                <option value="">Select an Option</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-2 row">
                        <label class="col-sm-4 col-form-label text-end">Remarks : </label>
                        <div class="col-sm-8">
                            <input type="text" id="remark" name="remark" class="form-control" value="@Model.Header.remark" />
                        </div>
                    </div>
                    <div class="mb-2 row d-none">
                        <label class="col-sm-4 col-form-label text-end">Status : </label>
                        <div class="col-sm-8">
                            <input type="text" id="order_status" readonly name="order_status" class="form-control" value="@Model.Header.order_status" />
                        </div>
                    </div>
                </div>
            </div>            
        </div>


        <!-- Address Selection Modal -->
        <div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addressModalLabel">
                            <i class="fas fa-map-marker-alt"></i> Select <span id="modalTypeText">Origin</span> Address
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Search Input -->
                        <div class="mb-3">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text"
                                       autocomplete="off"
                                       class="form-control"
                                       id="addressSearch"
                                       placeholder="Search by name, address, or city..."
                                       onkeyup="searchAddresses()">
                            </div>
                        </div>

                        <!-- Loading Spinner -->
                        <div class="loading-spinner" id="loadingSpinner">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading addresses...</p>
                        </div>

                        <!-- Address List -->
                        <div class="address-search" id="addressList">
                            <!-- Address items akan dimuat via JavaScript -->
                        </div>

                        <!-- No Results -->
                        <div class="text-center text-muted" id="noResults" style="display: none;">
                            <i class="fas fa-search fa-2x mb-2"></i>
                            <p>Address not found</p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="detail-section d-none">
            <div class="table-container">
                <table class="excel-table">
                    <thead>
                        <tr>
                            <th class="row-number">#</th>
                            <th class="col-narrow">Item Name</th>
                            <th class="col-narrow">Item Category</th>
                            <th class="col-narrow">Package Unit</th>
                            <th class="col-narrow">Length</th>
                            <th class="col-narrow">Width</th>
                            <th class="col-narrow">Height</th>
                            <th class="col-narrow">Weight</th>
                            <th class="col-narrow">Qty</th>
                            <th class="col-action">Action</th>
                        </tr>
                    </thead>
                    <tbody id="detailTableBody">
                    </tbody>
                </table>
            </div>
            <button type="button" class="btn-add-row" onclick="addRow()">
                <i class="fas fa-plus"></i> Add Row
            </button>
        </div>

        <div class="form-actions">
            <button type="button" class="btn btn-warning btn-sm" onclick="resetForm()">
                <i class="fas fa-times"></i> Cancel
            </button>
            <button type="submit" class="btn btn-primary btn-sm" data-action="save">
                <i class="fas fa-save"></i> Save
            </button>

            @* @if (Model.Header.id_seq == 0)
            {
                <button type="submit" class="btn btn-info btn-sm" data-action="save_new">
                    <i class="fas fa-save"></i> Save And New
                </button>
            } *@
        </div>
    </form>
</div>

@section Scripts {
    <script>
        let rowIndex = 0;
        const header = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Header))
        details = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Details))

        // $(document).ready(function () {
        // });

         $('.select2').select2({
            placeholder: "Select an Option",
            allowClear: true,
            width: '100%' // ini penting biar full lebar
        });

        if (details.length > 0) {
            details.forEach((item, i) => {
                addRow(item);
            });
        } else {
            addRow();
        }

        let actionType = "save"; // default value

        // Saat tombol diklik, simpan type-nya
        $('button[type="submit"]').on('click', function () {
            actionType = $(this).data('action');
        });

        $('#orderForm').on('submit', function (e) {
            e.preventDefault();
            showLoading();
            const save_mode = actionType;
            console.log(save_mode);
            // return false;
            const formData = {
                header: {
                    id_seq : parseInt($('#id_seq').val()) || 0,
                    wh_code: $('#wh_code').val(),
                    sub_custid: $('#sub_custid').val(),
                    cnee_code: $('#cnee_code').val(),
                    inv_no : $('#inv_no').val(),
                    delivery_date: $('#delivery_date').val(),
                    pickup_date: $('#pickup_date').val(),
                    origin_id : $('#city').val(),
                    dest_area : $('#destination_city').val(),
                    tot_pkgs : parseInt($('#tot_pkgs').val()) || 0,
                    serv_req : $('#serv_req').val(),
                    uom : $('#uom').val(),
                    pallet_consume : $('#pallet_consume').val(),
                    pallet_delivery : $('#pallet_delivery').val(),
                    si_no : $('#si_no').val(),
                    do_rcv_date : $('#do_rcv_date').val(),
                    do_rcv_time : $('#do_rcv_time').val(),
                    moda_req : $('#moda_req').val(),
                    truck_size : $('#truck_size').val(),
                    remark : $('#remark').val(),
                    mceasy_origin_address_id : parseInt($('#origin_address_id').val()),
                    mceasy_destination_address_id : parseInt($('#destination_address_id').val()),
                    mceasy_origin_name : $('#origin_id').val(),
                    mceasy_dest_name : $('#destination_id').val(),
                },
                details: []
            };
            console.log(formData);

     
            $('#detailTableBody tr').each(function () {
                const row = $(this);
                formData.details.push({
                    id_seq: parseInt(row.find('input[name$=".id_seq"]').val()) || 0,
                    id_seq_order: parseInt($('#id_seq').val()) || 0,
                    item_name: row.find('input[name$=".item_name"]').val(),
                    item_category: row.find('input[name$=".item_category"]').val(),
                    pkg_unit: row.find('input[name$=".pkg_unit"]').val(),
                    item_length: parseInt(row.find('input[name$=".item_length"]').val()) || 0,
                    item_width: parseInt(row.find('input[name$=".item_width"]').val()) || 0,
                    item_height: parseInt(row.find('input[name$=".item_height"]').val()) || 0,
                    item_wgt: parseFloat(row.find('input[name$=".item_wgt"]').val()) || 0,
                    koli_qty: parseInt(row.find('input[name$=".koli_qty"]').val()) || 0
                });
            });


            $.ajax({
                url: '/Order/Save',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: (res) => {
                    if (res.success) {
                        hideLoading();
                        Swal.fire({
                            position: "top-end",
                            icon: "success",
                            title: res.message,
                            showConfirmButton: false,
                            timer: 1500
                        }).then(function(){
                            if(save_mode == 'save'){
                                window.location.href = '/Order/FormLoad/'+res.data.id_seq;
                            }else{
                                    $('#inv_no').val('');
                                    $('#si_no').val('');
                                setTimeout(() => {
                                    console.log("Focusing now...");
                                    $('#inv_no').focus();
                                }, 300); // tambahkan delay agar pasti
                            }
                        })
                    } else {
                        Swal.fire("Failed", "Failed saving data!", "error")
                    }
                },
                error: (xhr) => {
                    console.error(xhr.responseText);
                }
            });
        });

        function addRow(data = {}) {
            const row = `<tr>
                <td class="row-number">${rowIndex + 1}</td>
                <td>
                    <input type="hidden" name="details[${rowIndex}].id_seq" value="${data.id_seq || 0}" />
                    <input type="hidden" name="details[${rowIndex}].id_seq_order" value="${data.id_seq_order || 0}" />
                    <input type="text" name="details[${rowIndex}].item_name" class="form-control" value="${data.item_name || ''}" />
                </td>
                <td><input type="text" name="details[${rowIndex}].item_category" class="form-control" value="${data.item_category || ''}" /></td>
                <td><input type="text" name="details[${rowIndex}].pkg_unit" class="form-control" value="${data.pkg_unit || ''}" /></td>
                <td><input type="number" name="details[${rowIndex}].item_length" class="form-control" value="${data.item_length || 0}" /></td>
                <td><input type="number" name="details[${rowIndex}].item_width" class="form-control" value="${data.item_width || 0}" /></td>
                <td><input type="number" name="details[${rowIndex}].item_height" class="form-control" value="${data.item_height || 0}" /></td>
                <td><input type="number" name="details[${rowIndex}].item_wgt" class="form-control" value="${data.item_wgt || 0}" step="0.01" /></td>
                <td><input type="number" name="details[${rowIndex}].koli_qty" class="form-control" value="${data.koli_qty || 0}" /></td>
                <td class="text-center"><i class="bi bi-trash text-danger" role="button" onclick="deleteRow(this)"></i></td>
            </tr>`;
            $('#detailTableBody').append(row);
            rowIndex++;
        }

        function deleteRow(el) {
            $(el).closest('tr').remove();
        }

        function resetForm() {
            $('#orderForm')[0].reset();
            $('#detailTableBody').empty();
            rowIndex = 0;
            addRow();
        }


        // Arrow Key Navigation for Excel-style inputs
        $(document).on('keydown', '.excel-table input, .excel-table select', function (e) {
            const key = e.which;
            const $current = $(this);
            const $allInputs = $('#detailTableBody').find('input, select').filter(':visible');
            const index = $allInputs.index(this);
            const total = $allInputs.length;

            let rowIndex = $current.closest('tr').index();
            let colIndex = $current.closest('td').index();
            let $next;

            switch (key) {
                case 37: // left
                    $next = $current.closest('td').prev().find('input, select');
                    break;
                case 39: // right
                    $next = $current.closest('td').next().find('input, select');
                    break;
                case 38: // up
                    $next = $('#detailTableBody tr').eq(rowIndex - 1).find('td').eq(colIndex).find('input, select');
                    break;
                case 40: // down
                    $next = $('#detailTableBody tr').eq(rowIndex + 1).find('td').eq(colIndex).find('input, select');
                    break;
            }

            if ($next && $next.length) {
                e.preventDefault(); // prevent scrolling
                $next.focus();
            }
        });
    </script>



    <script>
        // Simulasi data dummy (biasanya dari server)
        const dummyAddresses = [
            {
                "geofenceId": 26723,
                "companyId": 2174,
                "customerId": "6e18b86d-0528-4ddd-94b5-159a7fa04004",
                "fenceName": "CV. AMANAH MULTI JAYA",
                "type": "C",
                "polyData": null,
                "circData": "<(-6.287859,106.882971),100>",
                "address": "Jl. Pinang Ranti No. 54 Kelurahan Pinang, Jakarta Timur",
                "addressDetail": "",
                "province": "Daerah Khusus Ibukota Jakarta",
                "city": "Jakarta Timur",
                "postalCode": null,
                "category": "Customer",
                "contactName": "Budi Santoso",
                "phoneNo": "021-8765432",
                "isGarage": false,
                "isServiceLoc": false,
                "isBillingAddr": false,
                "isDepot": false,
                "isAlert": true,
                "serviceStart": null,
                "serviceEnd": null,
                "breakStart": null,
                "breakEnd": null,
                "serviceLocType": null,
                "customerName": "BOSCH_BT_NAGRAK_TEST",
                "hasRelation": false
            },
            {
                "geofenceId": 26724,
                "companyId": 2174,
                "customerId": "6e18b86d-0528-4ddd-94b5-159a7fa04004",
                "fenceName": "PT. MAJU BERSAMA SEJAHTERA",
                "type": "C",
                "polyData": null,
                "circData": "<(-6.200000,106.816666),150>",
                "address": "Jl. Sudirman No. 123, Senayan, Jakarta Pusat",
                "addressDetail": "Gedung Plaza Indonesia Lt. 15",
                "province": "Daerah Khusus Ibukota Jakarta",
                "city": "Jakarta Pusat",
                "postalCode": "10270",
                "category": "Customer",
                "contactName": "Siti Nurhaliza",
                "phoneNo": "021-5551234",
                "isGarage": false,
                "isServiceLoc": true,
                "isBillingAddr": false,
                "isDepot": false,
                "isAlert": true,
                "serviceStart": "08:00",
                "serviceEnd": "17:00",
                "breakStart": "12:00",
                "breakEnd": "13:00",
                "serviceLocType": "Office",
                "customerName": "TELKOM_INDONESIA",
                "hasRelation": true
            },
            {
                "geofenceId": 26725,
                "companyId": 2174,
                "customerId": "6e18b86d-0528-4ddd-94b5-159a7fa04004",
                "fenceName": "TOKO SUMBER REJEKI",
                "type": "C",
                "polyData": null,
                "circData": "<(-6.175000,106.827000),80>",
                "address": "Jl. Mangga Besar Raya No. 45, Taman Sari",
                "addressDetail": "Sebelah Bank BCA",
                "province": "Daerah Khusus Ibukota Jakarta",
                "city": "Jakarta Barat",
                "postalCode": "11180",
                "category": "Customer",
                "contactName": "Ahmad Wijaya",
                "phoneNo": "021-6259876",
                "isGarage": false,
                "isServiceLoc": false,
                "isBillingAddr": true,
                "isDepot": false,
                "isAlert": false,
                "serviceStart": null,
                "serviceEnd": null,
                "breakStart": null,
                "breakEnd": null,
                "serviceLocType": null,
                "customerName": "UNILEVER_INDONESIA",
                "hasRelation": false
            },
            {
                "geofenceId": 26726,
                "companyId": 2174,
                "customerId": "6e18b86d-0528-4ddd-94b5-159a7fa04004",
                "fenceName": "GUDANG ELEKTRONIK JAYA",
                "type": "W",
                "polyData": null,
                "circData": "<(-6.260000,106.890000),200>",
                "address": "Jl. Raya Bekasi KM 18, Cakung, Jakarta Timur",
                "addressDetail": "Kompleks Gudang Blok C-15",
                "province": "Daerah Khusus Ibukota Jakarta",
                "city": "Jakarta Timur",
                "postalCode": "13910",
                "category": "Warehouse",
                "contactName": "Bambang Sutrisno",
                "phoneNo": "021-4608123",
                "isGarage": false,
                "isServiceLoc": false,
                "isBillingAddr": false,
                "isDepot": true,
                "isAlert": true,
                "serviceStart": "07:00",
                "serviceEnd": "16:00",
                "breakStart": null,
                "breakEnd": null,
                "serviceLocType": "Warehouse",
                "customerName": "SAMSUNG_ELECTRONICS",
                "hasRelation": true
            },
            {
                "geofenceId": 26727,
                "companyId": 2174,
                "customerId": "6e18b86d-0528-4ddd-94b5-159a7fa04004",
                "fenceName": "APOTEK SEHAT BERSAMA",
                "type": "C",
                "polyData": null,
                "circData": "<(-6.225000,106.845000),60>",
                "address": "Jl. Kebon Sirih No. 88, Menteng, Jakarta Pusat",
                "addressDetail": "",
                "province": "Daerah Khusus Ibukota Jakarta",
                "city": "Jakarta Pusat",
                "postalCode": "10340",
                "category": "Customer",
                "contactName": "Dr. Maya Sari",
                "phoneNo": "021-3904567",
                "isGarage": false,
                "isServiceLoc": true,
                "isBillingAddr": false,
                "isDepot": false,
                "isAlert": true,
                "serviceStart": "08:30",
                "serviceEnd": "21:00",
                "breakStart": null,
                "breakEnd": null,
                "serviceLocType": "Pharmacy",
                "customerName": "KIMIA_FARMA",
                "hasRelation": false
            },
            {
                "geofenceId": 26728,
                "companyId": 2174,
                "customerId": "6e18b86d-0528-4ddd-94b5-159a7fa04004",
                "fenceName": "RESTORAN PADANG MINANG",
                "type": "C",
                "polyData": null,
                "circData": "<(-6.195000,106.820000),50>",
                "address": "Jl. Sabang No. 25, Gambir, Jakarta Pusat",
                "addressDetail": "Dekat Hotel Indonesia",
                "province": "Daerah Khusus Ibukota Jakarta",
                "city": "Jakarta Pusat",
                "postalCode": "10160",
                "category": "Customer",
                "contactName": "Pak Joni",
                "phoneNo": "021-3456789",
                "isGarage": false,
                "isServiceLoc": false,
                "isBillingAddr": false,
                "isDepot": false,
                "isAlert": false,
                "serviceStart": "10:00",
                "serviceEnd": "22:00",
                "breakStart": null,
                "breakEnd": null,
                "serviceLocType": "Restaurant",
                "customerName": "FOOD_DELIVERY_SERVICE",
                "hasRelation": false
            }
        ];

        let allAddresses = [];
        let filteredAddresses = [];

        // Function untuk membuka modal alamat
        // async function openAddressModal() {
        //     // const customerId = document.getElementById('customerId').value;
        //     const customerId = "6e18b86d-0528-4ddd-94b5-159a7fa04004";

        //     // Show modal
        //     const addressModal = new bootstrap.Modal(document.getElementById('addressModal'));
        //     addressModal.show();

        //     // Show loading
        //     showLoading(true);

        //     // Reset search
        //     document.getElementById('addressSearch').value = '';

        //     try {
        //         // Simulasi API call (ganti dengan real API call)
        //         await loadAddresses(customerId);
        //     } catch (error) {
        //         console.error('Error loading addresses:', error);
        //         showNoResults(true);
        //     } finally {
        //         showLoading(false);
        //     }
        // }


        // Function untuk membuka modal alamat
        async function openAddressModal(type = 'origin') {
            currentAddressType = type;
            const customerId = document.getElementById('sub_custid').value;
            let category = null;

            if (type == 'origin'){
                category = 'Origin'
            }

            if (customerId == null || customerId === '') {
                showToast('Please select a customer first.', type = 'error')
                return;
            }

            // Update modal title
            const modalTypeText = type === 'origin' ? 'Origin' : 'Destination';
            document.getElementById('modalTypeText').textContent = modalTypeText;

            // Show modal
            const addressModal = new bootstrap.Modal(document.getElementById('addressModal'));
            addressModal.show();

            // Show loading
            showLoading(true);

            // Reset search
            document.getElementById('addressSearch').value = '';

            try {
                // Simulasi API call (ganti dengan real API call)
                await loadAddresses(customerId, category);
            } catch (error) {
                console.error('Error loading addresses:', error);
                showNoResults(true);
            } finally {
                showLoading(false);
            }
        }

        // Simulasi API call untuk load addresses
        async function loadAddresses(customerId, category) {
            // Simulasi delay network
            await new Promise(resolve => setTimeout(resolve, 1000));

            if (category == null) {
                category = 'All';
            }

            let url = `/Geofence/GetGeofenceByCategory?id=${customerId}&category=${category}`;

            
            
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error('Failed to fetch addresses');
            }
            const data = await response.json();
            const addresses = data.data || [];

            console.log(addresses);

            // return;
            // Untuk demo, gunakan dummy data
            // allAddresses = addresses.filter(addr => addr.customerId === customerId);
            allAddresses = addresses;
            filteredAddresses = [...addresses];

            renderAddresses();
        }

        // Function untuk render addresses ke DOM
        function renderAddresses() {
            const addressList = document.getElementById('addressList');
            addressList.innerHTML = '';

            if (filteredAddresses.length === 0) {
                showNoResults(true);
                return;
            }

            // Get current selected address untuk comparison
            let selectedAddress = '';
            if (currentAddressType === 'origin') {
                selectedAddress = document.getElementById('destination_id').value;
            } else {
                selectedAddress = document.getElementById('origin_id').value;
            }

            filteredAddresses.forEach((address, index) => {
                const addressItem = createAddressItem(address, index, selectedAddress);
                addressList.appendChild(addressItem);
            });

            showNoResults(false);
        }

        // Function untuk membuat elemen address item
        function createAddressItem(address, index, selectedAddress = '') {
            const div = document.createElement('div');
            // Check jika address ini sudah dipilih di field lain
            const isDisabled = selectedAddress && selectedAddress === address.fenceName;

            div.className = `address-item ${isDisabled ? 'disabled' : ''}`;

            if (!isDisabled) {
                div.onclick = () => selectAddress(address);
            }

            const categoryBadge = getCategoryBadge(address.category);
            const customerBadge = address.category ? '<span class="badge bg-info ms-1 font-sm"> '+ address.category +' </span>' : '';
            const serviceBadge = address.customer ? '<span class="badge bg-success ms-1 font-sm"> '+ address.customer +' </span>' : '';
            const depotBadge = address.areaGroup ? '<span class="badge bg-primary ms-1">'+ address.areaGroup +'</span>' : '';
            const disabledBadge = isDisabled ? '<span class="badge bg-danger ms-1">Already Selected</span>' : '';

            div.innerHTML = `
                <div class="d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1">
                        <h6 class="mb-2">
                            <i class="fas fa-building me-1"></i>
                            ${address.fenceName}
                            ${customerBadge}
                            ${serviceBadge}
                            ${depotBadge}
                            ${disabledBadge}
                        </h6>
                        <p class="mb-1 text-muted">
                            <i class="fas fa-map-marker-alt me-1"></i>
                            ${address.address}
                            
                        </p>
                        <div class="row">
                            <div class="col-md-6">
                                <small class="text-muted">
                                    <i class="fas fa-map me-1"></i>
                                    ${address.city}, ${address.province}
                                    ${address.postalCode ? ' - ' + address.postalCode : ''}
                                </small>
                            </div>
                            <div class="col-md-6">
                                ${address.contactName ? `
                                    <small class="text-muted">
                                        <i class="fas fa-user me-1"></i>
                                        ${address.contactName}
                                        ${address.phoneNo ? ' - ' + address.phoneNo : ''}
                                    </small>
                                ` : ''}
                            </div>
                        </div>
                        ${address.serviceStart && address.serviceEnd ? `
                            <small class="text-info">
                                <i class="fas fa-clock me-1"></i>
                                Service Time: ${address.serviceStart} - ${address.serviceEnd}
                            </small>
                        ` : ''}
                    </div>
                    <div class="text-end">
                        <small class="text-muted d-none">ID: ${address.geofenceId}</small>
                    </div>
                </div>
            `;

            return div;
        }

        // Function untuk get category badge
        function getCategoryBadge(category) {
            const badges = {
                'Customer': '<span class="badge bg-primary">Customer</span>',
                'Warehouse': '<span class="badge bg-info">Warehouse</span>',
                'Depot': '<span class="badge bg-secondary">Depot</span>'
            };
            return badges[category] || '<span class="badge bg-light text-dark">' + category + '</span>';
        }

        // Function untuk search addresses
        function searchAddresses() {
            const searchTerm = document.getElementById('addressSearch').value.toLowerCase();

            console.log('All address', allAddresses);
            console.log('Searching for:', searchTerm);
            console.log('All addresses count:', allAddresses.length);

            if (searchTerm === '') {
                filteredAddresses = [...allAddresses];
            } else {
                filteredAddresses = allAddresses.filter(address =>
                    address.fenceName?.toLowerCase().includes(searchTerm) ||
                    address.address?.toLowerCase().includes(searchTerm) ||
                    address.city?.toLowerCase().includes(searchTerm) ||
                    address.province?.toLowerCase().includes(searchTerm) ||
                    (address.contactName && address.contactName.toLowerCase().includes(searchTerm)) ||
                    (address.customerName && address.customerName.toLowerCase().includes(searchTerm))
                );
            }

            renderAddresses();
        }

        // Function untuk select address
        // function selectAddress(address) {
        //     // Fill form fields
        //     document.getElementById('origin_id').value = address.fenceName;
        //     document.getElementById('city').value = address.city;

        //     // Close modal
        //     const addressModal = bootstrap.Modal.getInstance(document.getElementById('addressModal'));
        //     addressModal.hide();

        //     // Optional: Show success feedback
        //     showSuccessToast(`Address selected: ${address.fenceName}`);
        // }

        // Function untuk select address
        function selectAddress(address) {
            // Fill form fields berdasarkan type
            if (currentAddressType === 'origin') {
                document.getElementById('origin_id').value = address.fenceName;
                document.getElementById('city').value = address.areaGroup;
                document.getElementById('origin_address_id').value = address.geofenceId;
            } else if (currentAddressType === 'destination') {
                document.getElementById('destination_id').value = address.fenceName;
                document.getElementById('destination_city').value = address.areaGroup;
                document.getElementById('destination_address_id').value = address.geofenceId;
            }

            // Close modal
            const addressModal = bootstrap.Modal.getInstance(document.getElementById('addressModal'));
            addressModal.hide();

            // Optional: Show success feedback
            const typeText = currentAddressType === 'origin' ? 'Origin' : 'Destination';
            showSuccessToast(`${typeText} address selected: ${address.fenceName}`);
        }

        // Helper functions
        function showLoading(show) {
            if(show){
                showNoResults(false);
            }
            document.getElementById('loadingSpinner').style.display = show ? 'block' : 'none';
            document.getElementById('addressList').style.display = show ? 'none' : 'block';
        }

        function showNoResults(show) {
            document.getElementById('noResults').style.display = show ? 'block' : 'none';
        }

        // Simple toast notification
        function showSuccessToast(message) {
            const toast = document.createElement('div');
            toast.className = 'toast align-items-center text-white bg-success border-0 position-fixed top-0 end-0 m-3';
            toast.style.zIndex = '9999';
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas fa-check-circle me-2"></i>${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;

            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();

            // Remove from DOM after hide
            toast.addEventListener('hidden.bs.toast', () => {
                document.body.removeChild(toast);
            });
        }
    </script>
}
