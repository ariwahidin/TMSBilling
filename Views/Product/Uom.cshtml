@model IEnumerable<TMSBilling.Models.ProductType>
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewData["Title"] = "Product Type";
    var metadata = ViewBag.Metadata as TMSBilling.Models.Metadata;
}

<a href="/Product/Index" class="btn btn-primary btn-sm mb-3">Back</a>
<button class="btn btn-primary btn-sm mb-3" id="btnAdd">Add Type</button>
<form asp-action="Index" class="mb-3">
    <div class="input-group">
        <input type="text" name="search" class="form-control" value="@ViewBag.Search" placeholder="Search..." />
        <button type="submit" class="btn btn-primary">Search</button>
    </div>
</form>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.id</td>
                <td>@item.name</td>
                <td>@item?.product_category?.name</td>
                <td>
                    <button class="btn btn-sm btn-warning btnEdit" data-id="@item?.id">Edit</button>
                    <button class="btn btn-sm btn-danger btnDelete" data-id="@item?.id">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@* @if (metadata != null)
{
    <nav>
        <ul class="pagination">
            @for (int i = 1; i <= metadata.total_page; i++)
            {
                <li class="page-item @(i == metadata.page ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                </li>
            }
        </ul>
    </nav>
} *@



<div class="modal fade" id="typeModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Form Product Type</h5>
                <button class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="modalContent"></div>
        </div>
    </div>
</div>

@* @section Scripts {
    <script>
        $(document).ready(function () {
            // $('#productTable').DataTable();
            let modal = new bootstrap.Modal(document.getElementById("typeModal"));
            let isEdit = false;

            $("#btnAdd").click(function () {
                isEdit = false;
                $.get("/Product/FormType", function (html) {
                    $("#modalContent").html(html);
                    modal.show();
                });
            });

            $(".btnEdit").click(function () {
                isEdit = true;
                const id = $(this).data("id");
                $.get("/Product/FormType?id=" + id, function (html) {
                    $("#modalContent").html(html);
                    modal.show();
                });
            });

            $(".btnDelete").click(function () {
                if (!confirm("Yakin hapus data ini?")) return;
                const id = $(this).data("id");

                $.ajax({
                    url: '/Product/DeleteType/'+id,
                    type: 'DELETE',
                    data: { id: id },
                    success: function (result) {
                        alert("Product Type deleted!");
                        location.reload();
                    },
                    error: function (err) {
                        alert("Gagal menghapus data.");
                        console.log(err);
                    }
                });
            });

            $(document).on("submit", "#productTypeForm", function (e) {

                e.preventDefault();

                let url = isEdit ? '@Url.Action("EditType", "Product")' : '@Url.Action("FormType", "Product")';

                $.ajax({
                    url: url,
                    type: "POST",
                    data: $(this).serialize(),
                    success: function (res) {
                        if (res.success) {
                            alert("Product Type saved!");
                            location.reload();
                        } else {
                            let errorMsg = res.message;
                            if (res.detail) {
                                try {
                                    let detail = JSON.parse(res.detail);
                                    if (detail.errors) {
                                        let errors = [];
                                        for (let key in detail.errors) {
                                            errors.push(key + ": " + detail.errors[key].join(", "));
                                        }
                                        errorMsg = errors.join("\n");
                                    }
                                } catch (e) {
                                    console.error("Parse error:", e);
                                }
                            }

                            alert("Error:\n" + errorMsg);
                        }
                    },
                    error: function (err) {
                        alert("Unexpected error");
                        console.log(err);
                    }
                });
            });
        });
    </script>
} *@
