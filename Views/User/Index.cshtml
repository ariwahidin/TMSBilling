@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewData["Title"] = "Master User";
}

@* <h2 class="mb-4">User Report</h2> *@

<div id="userTable"></div>

<div class="mb-2">
    <button id="ajax-trigger">Load Data</button>
    <button id="select-all">Select All</button>
    <button id="deselect-all">Deselect All</button>
    <button onclick="window.location.href='/User/Create'">Add</button>
    <button onclick="editUser()">Edit</button>
    <button onclick="deleteUser()">Delete</button>
    <span id="select-stats"></span>
</div>
<div class="mt-2 mb-2">
    <select id="filter-field">
        <option></option>
        <option value="username" selected>Username</option>
    </select>
    <select id="filter-type">
        <option value="=">=</option>
        <option value="<"><</option>
        <option value="<="><=</option>
        <option value=">">></option>
        <option value=">=">>=</option>
        <option value="!=">!=</option>
        <option value="like" selected>like</option>
    </select>
    <input id="filter-value" type="text" placeholder="value to filter">
    <button id="filter-clear">Clear Filter</button>
    <button data-bs-toggle="modal" data-bs-target="#columnModal">
        Column visible
    </button>
    <button onclick="resetColumnVisibility()">Reset Column</button>
    @* <div id="column-visibility" class="mb-2">
        <strong>Tampilkan Kolom:</strong><br>
        <label><input type="checkbox" value="username" checked> Username</label>
        <label><input type="checkbox" value="updatedAt" checked> Updated At</label>
        <label><input type="checkbox" value="updatedBy" checked> Updated By</label>
    </div> *@
</div>
<div id="example-table"></div>

<!-- Modal Toggle Kolom -->
<div class="modal fade" id="columnModal" tabindex="-1" aria-labelledby="columnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="columnModalLabel">Show / Hide Column</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
            </div>
            <div class="modal-body" id="column-visibility">
                <!-- Checkbox kolom -->
                <label><input type="checkbox" value="username" checked> Username</label><br>
                <label><input type="checkbox" value="updatedAt" checked> Updated At</label><br>
                <label><input type="checkbox" value="updatedBy" checked> Updated By</label>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
            </div>
        </div>
    </div>
</div>

<form id="tokenForm">
    @Html.AntiForgeryToken()
</form>


@section Styles {
    @* <link href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css" rel="stylesheet" /> *@
    <link href="https://unpkg.com/tabulator-tables@6.3.1/dist/css/tabulator.min.css" rel="stylesheet">
    <style>
        .tabulator .tabulator-header {
            background-color: #f8f9fa;
        }
    </style>
}




@section Scripts {
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables@6.3.1/dist/js/tabulator.min.js"></script>
    <script>
        var table = new Tabulator("#example-table", {
            height:405, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
            // data:tabledata,
            layout:"fitColumns", //fit columns to width of table (optional)
            selectableRows:true,
            rowHeader:{
                headerSort:false,
                resizable: false,
                frozen:true,
                headerHozAlign:"center",
                hozAlign:"center",
                formatter:"rowSelection",
                titleFormatter:"rowSelection",
                width:10,
                cellClick:function(e, cell){
                    console.log("aww")
                    cell.getRow().toggleSelect();
                }
            },
            pagination:"local",
            paginationSize:6,
            paginationSizeSelector:[3, 6, 8, 10],
            movableColumns:true,
            paginationCounter:"rows",
            columns:[ //Define Table Columns
                {title:"Username", field:"username", width:150},
                {title:"Updated At", field:"updatedAt", width:200},
                {title:"Updated By", field:"updatedBy", width:150}
            ],
        });


        //trigger AJAX load on "Load Data via AJAX" button click
        document.getElementById("ajax-trigger").addEventListener("click", function () {
            loadData()
        });

        table.on("rowSelectionChanged", function(data, rows){
          document.getElementById("select-stats").innerHTML = data.length + ' selected';
          console.log("data : ", data);
        });

        //select row on "select all" button click
        document.getElementById("select-all").addEventListener("click", function(){
            table.selectRow();
        });

        //deselect row on "deselect all" button click
        document.getElementById("deselect-all").addEventListener("click", function(){
            table.deselectRow();
        });

        //Define variables for input elements
        var fieldEl = document.getElementById("filter-field");
        var typeEl = document.getElementById("filter-type");
        var valueEl = document.getElementById("filter-value");


        //Custom filter example
        function customFilter(data){
            return data.car && data.rating < 3;
        }

        //Trigger setFilter function with correct parameters
        function updateFilter(){
          console.log("update filter dijalankan")
          var filterVal = fieldEl.options[fieldEl.selectedIndex].value;
          var typeVal = typeEl.options[typeEl.selectedIndex].value;

          var filter = filterVal == "function" ? customFilter : filterVal;

          if(filterVal == "function" ){
            typeEl.disabled = true;
            valueEl.disabled = true;
          }else{
            typeEl.disabled = false;
            valueEl.disabled = false;
          }

          if(filterVal){
            table.setFilter(filter,typeVal, valueEl.value);
          }
        }

        //Update filters on value change
        document.getElementById("filter-field").addEventListener("change", updateFilter);
        document.getElementById("filter-type").addEventListener("change", updateFilter);
        document.getElementById("filter-value").addEventListener("keyup", updateFilter);

        //Clear filters on "Clear Filters" button click
        document.getElementById("filter-clear").addEventListener("click", function(){
          fieldEl.value = "";
          typeEl.value = "like";
          valueEl.value = "";

          table.clearFilter();
        });

        function loadData(){
            $.ajax({
                url: "/User/GetUsers",
                method: "GET",
                dataType: "json",
                success: function (response) {
                    console.log("Data berhasil diambil:", response);
                    table.setData(response.data).then(() => {
                        applyColumnVisibilityFromStorage();
                    });
                    // table.setData(response.data)
                    // sync checkbox state setelah data dimuat ulang
                    // ["username", "updatedAt", "updatedBy"].forEach(field => {
                    //     const col = table.getColumn(field);
                    //     const cb = document.querySelector(`#column-visibility input[value=${field}]`);
                    //     if (col && cb) {
                    //         cb.checked = col.isVisible();
                    //     }
                    // });
                },
                error: function (xhr, status, error) {
                    console.error("Terjadi kesalahan saat mengambil data:", error);
                }
            });
        }

        function editUser(){
            console.log("selected data : ",table.getSelectedData())

            const data = table.getSelectedData();

            if(data.length > 1 || data.length < 1){
                showToast("Access denied", type = 'error')
                return;
            }

            window.location.href = '/User/edit/'+data[0].id
        }
        function deleteUser() {
            const data = table.getSelectedData();

            if (data.length === 0) {
                alert("Please select at least one user to delete.");
                return;
            }

            if (!confirm("Are you sure you want to delete " + data.length + " user(s)?")) return;

            const ids = data.map(item => item.id); // pastikan 'id' ada di objek user

            fetch('/User/DeleteBulk', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector("input[name=__RequestVerificationToken]").value
                },
                body: JSON.stringify({ ids: ids })
            })
            .then(res => {
                if (res.ok) {
                    // alert("Data berhasil dihapus.");
                    table.replaceData(); // reload data
                    loadData();
                } else {
                    alert("Delete failed.");
                }
            })
            .catch(err => {
                console.error(err);
                alert("Terjadi kesalahan saat menghapus data.");
            });
        }


        document.querySelectorAll("#column-visibility input[type=checkbox]").forEach(cb => {
            cb.addEventListener("change", function () {
                const column = table.getColumn(this.value);
                if (column) {
                    if (this.checked) {
                        column.show();
                    } else {
                        column.hide();
                    }

                    // Simpan ke localStorage
                    saveColumnVisibility();
                }
            });
        });

        function saveColumnVisibility() {
            const visibilitySettings = {};
            document.querySelectorAll("#column-visibility input[type=checkbox]").forEach(cb => {
                visibilitySettings[cb.value] = cb.checked;
            });

            localStorage.setItem("userTableColumnVisibility", JSON.stringify(visibilitySettings));
        }

        function applyColumnVisibilityFromStorage() {
            const savedSettings = localStorage.getItem("userTableColumnVisibility");
            if (!savedSettings) return;

            const visibilitySettings = JSON.parse(savedSettings);

            Object.entries(visibilitySettings).forEach(([field, visible]) => {
                const col = table.getColumn(field);
                const cb = document.querySelector(`#column-visibility input[value="${field}"]`);
                if (col && cb) {
                    cb.checked = visible;
                    visible ? col.show() : col.hide();
                }
            });
        }

        function resetColumnVisibility() {
            localStorage.removeItem("userTableColumnVisibility");
            table.getColumns().forEach(col => col.show());
            document.querySelectorAll("#column-visibility input[type=checkbox]").forEach(cb => cb.checked = true);
        }

        loadData()
    </script>
}
